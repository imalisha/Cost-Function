{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "9e1c72ff",
   "metadata": {},
   "source": [
    "# Optional Lab: Cost Function"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da9752bc",
   "metadata": {},
   "source": [
    "# Goals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81de9c35",
   "metadata": {},
   "source": [
    "In this lab you will:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ea8a74fb",
   "metadata": {},
   "outputs": [],
   "source": [
    " .You will implement and explore the cost function for linear regression with one variable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95b4bb31",
   "metadata": {},
   "source": [
    "# Tools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c2762bb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "In this lab we will make use of:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2640e213",
   "metadata": {},
   "outputs": [],
   "source": [
    "NumPy, a popular library for scientific computing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "59958bd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "Matplotlib, a popular library for plotting data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d4f26128",
   "metadata": {},
   "outputs": [],
   "source": [
    "local plotting routines in the lab_utils_uni.py file in the local director"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8b62ef19",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'ipympl'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 2\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mnumpy\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mnp\u001b[39;00m\n\u001b[1;32m----> 2\u001b[0m get_ipython()\u001b[38;5;241m.\u001b[39mrun_line_magic(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mmatplotlib\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mwidget\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mpyplot\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mplt\u001b[39;00m\n\u001b[0;32m      4\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mlab_utils_uni\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m plt_intuition, plt_stationary, plt_update_onclick, soup_bowl\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:2414\u001b[0m, in \u001b[0;36mInteractiveShell.run_line_magic\u001b[1;34m(self, magic_name, line, _stack_depth)\u001b[0m\n\u001b[0;32m   2412\u001b[0m     kwargs[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlocal_ns\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mget_local_scope(stack_depth)\n\u001b[0;32m   2413\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbuiltin_trap:\n\u001b[1;32m-> 2414\u001b[0m     result \u001b[38;5;241m=\u001b[39m fn(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   2416\u001b[0m \u001b[38;5;66;03m# The code below prevents the output from being displayed\u001b[39;00m\n\u001b[0;32m   2417\u001b[0m \u001b[38;5;66;03m# when using magics with decodator @output_can_be_silenced\u001b[39;00m\n\u001b[0;32m   2418\u001b[0m \u001b[38;5;66;03m# when the last Python token in the expression is a ';'.\u001b[39;00m\n\u001b[0;32m   2419\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mgetattr\u001b[39m(fn, magic\u001b[38;5;241m.\u001b[39mMAGIC_OUTPUT_CAN_BE_SILENCED, \u001b[38;5;28;01mFalse\u001b[39;00m):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\IPython\\core\\magics\\pylab.py:99\u001b[0m, in \u001b[0;36mPylabMagics.matplotlib\u001b[1;34m(self, line)\u001b[0m\n\u001b[0;32m     97\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAvailable matplotlib backends: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m\"\u001b[39m \u001b[38;5;241m%\u001b[39m backends_list)\n\u001b[0;32m     98\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m---> 99\u001b[0m     gui, backend \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mshell\u001b[38;5;241m.\u001b[39menable_matplotlib(args\u001b[38;5;241m.\u001b[39mgui\u001b[38;5;241m.\u001b[39mlower() \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(args\u001b[38;5;241m.\u001b[39mgui, \u001b[38;5;28mstr\u001b[39m) \u001b[38;5;28;01melse\u001b[39;00m args\u001b[38;5;241m.\u001b[39mgui)\n\u001b[0;32m    100\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_show_matplotlib_backend(args\u001b[38;5;241m.\u001b[39mgui, backend)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\IPython\\core\\interactiveshell.py:3600\u001b[0m, in \u001b[0;36mInteractiveShell.enable_matplotlib\u001b[1;34m(self, gui)\u001b[0m\n\u001b[0;32m   3596\u001b[0m         \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mWarning: Cannot change to a different GUI toolkit: \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m'\u001b[39m\n\u001b[0;32m   3597\u001b[0m                 \u001b[38;5;124m'\u001b[39m\u001b[38;5;124m Using \u001b[39m\u001b[38;5;132;01m%s\u001b[39;00m\u001b[38;5;124m instead.\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;241m%\u001b[39m (gui, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpylab_gui_select))\n\u001b[0;32m   3598\u001b[0m         gui, backend \u001b[38;5;241m=\u001b[39m pt\u001b[38;5;241m.\u001b[39mfind_gui_and_backend(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpylab_gui_select)\n\u001b[1;32m-> 3600\u001b[0m pt\u001b[38;5;241m.\u001b[39mactivate_matplotlib(backend)\n\u001b[0;32m   3601\u001b[0m configure_inline_support(\u001b[38;5;28mself\u001b[39m, backend)\n\u001b[0;32m   3603\u001b[0m \u001b[38;5;66;03m# Now we must activate the gui pylab wants to use, and fix %run to take\u001b[39;00m\n\u001b[0;32m   3604\u001b[0m \u001b[38;5;66;03m# plot updates into account\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\IPython\\core\\pylabtools.py:360\u001b[0m, in \u001b[0;36mactivate_matplotlib\u001b[1;34m(backend)\u001b[0m\n\u001b[0;32m    355\u001b[0m \u001b[38;5;66;03m# Due to circular imports, pyplot may be only partially initialised\u001b[39;00m\n\u001b[0;32m    356\u001b[0m \u001b[38;5;66;03m# when this function runs.\u001b[39;00m\n\u001b[0;32m    357\u001b[0m \u001b[38;5;66;03m# So avoid needing matplotlib attribute-lookup to access pyplot.\u001b[39;00m\n\u001b[0;32m    358\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mmatplotlib\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m pyplot \u001b[38;5;28;01mas\u001b[39;00m plt\n\u001b[1;32m--> 360\u001b[0m plt\u001b[38;5;241m.\u001b[39mswitch_backend(backend)\n\u001b[0;32m    362\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow\u001b[38;5;241m.\u001b[39m_needmain \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[0;32m    363\u001b[0m \u001b[38;5;66;03m# We need to detect at runtime whether show() is called by the user.\u001b[39;00m\n\u001b[0;32m    364\u001b[0m \u001b[38;5;66;03m# For this, we wrap it into a decorator which adds a 'called' flag.\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\matplotlib\\pyplot.py:271\u001b[0m, in \u001b[0;36mswitch_backend\u001b[1;34m(newbackend)\u001b[0m\n\u001b[0;32m    268\u001b[0m \u001b[38;5;66;03m# have to escape the switch on access logic\u001b[39;00m\n\u001b[0;32m    269\u001b[0m old_backend \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mdict\u001b[39m\u001b[38;5;241m.\u001b[39m\u001b[38;5;21m__getitem__\u001b[39m(rcParams, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mbackend\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m--> 271\u001b[0m backend_mod \u001b[38;5;241m=\u001b[39m importlib\u001b[38;5;241m.\u001b[39mimport_module(\n\u001b[0;32m    272\u001b[0m     cbook\u001b[38;5;241m.\u001b[39m_backend_module_name(newbackend))\n\u001b[0;32m    274\u001b[0m required_framework \u001b[38;5;241m=\u001b[39m _get_required_interactive_framework(backend_mod)\n\u001b[0;32m    275\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m required_framework \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\importlib\\__init__.py:126\u001b[0m, in \u001b[0;36mimport_module\u001b[1;34m(name, package)\u001b[0m\n\u001b[0;32m    124\u001b[0m             \u001b[38;5;28;01mbreak\u001b[39;00m\n\u001b[0;32m    125\u001b[0m         level \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;241m1\u001b[39m\n\u001b[1;32m--> 126\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _bootstrap\u001b[38;5;241m.\u001b[39m_gcd_import(name[level:], package, level)\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:1204\u001b[0m, in \u001b[0;36m_gcd_import\u001b[1;34m(name, package, level)\u001b[0m\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:1176\u001b[0m, in \u001b[0;36m_find_and_load\u001b[1;34m(name, import_)\u001b[0m\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:1126\u001b[0m, in \u001b[0;36m_find_and_load_unlocked\u001b[1;34m(name, import_)\u001b[0m\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:241\u001b[0m, in \u001b[0;36m_call_with_frames_removed\u001b[1;34m(f, *args, **kwds)\u001b[0m\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:1204\u001b[0m, in \u001b[0;36m_gcd_import\u001b[1;34m(name, package, level)\u001b[0m\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:1176\u001b[0m, in \u001b[0;36m_find_and_load\u001b[1;34m(name, import_)\u001b[0m\n",
      "File \u001b[1;32m<frozen importlib._bootstrap>:1140\u001b[0m, in \u001b[0;36m_find_and_load_unlocked\u001b[1;34m(name, import_)\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'ipympl'"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "%matplotlib widget\n",
    "import matplotlib.pyplot as plt\n",
    "from lab_utils_uni import plt_intuition, plt_stationary, plt_update_onclick, soup_bowl\n",
    "plt.style.use('./deeplearning.mplstyle')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bfda08e",
   "metadata": {},
   "source": [
    "# Problem Statement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f966e9f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "You would like a model which can predict housing prices given the size of the house.\n",
    "Let's use the same two data points as before the previous lab- a house with 1000 square feet sold for $300,000\n",
    "and a house with 2000 square feet sold for \\$500,000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "726450ef",
   "metadata": {},
   "outputs": [],
   "source": [
    "Size (1000 sqft) Price (1000s of dollars)\n",
    "1 300\n",
    "2 500\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "721ea415",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = np.array([1.0, 2.0]) #(size in 1000 square feet)\n",
    "y_train = np.array([300.0, 500.0]) #(price in 1000s of dollars)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8565a99c",
   "metadata": {},
   "source": [
    "# Computing Cost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fb7eebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "The term 'cost' in this assignment might be a little confusing since the data is housing cost. Here, cost is a\n",
    "measure how well our model is predicting the target price of the house. The term 'price' is used for housing\n",
    "data.\n",
    "The equation for cost with one variable is:\n",
    "where\n",
    "is our prediction for example using parameters .\n",
    "is the squared difference between the target value and the prediction.\n",
    "These differences are summed over all the examples and divided by 2m to produce the cost, .\n",
    "Note, in lecture summation ranges are typically from 1 to m, while code will be from 0 to m-1.\n",
    "J(w,b) =\n",
    "1\n",
    "2m\n",
    "∑( ( ) −\n",
    "i=0\n",
    "m−1\n",
    "fw,b x\n",
    "(i) y\n",
    "(i)\n",
    ")\n",
    "2\n",
    "(1)\n",
    "fw,b (x ) = w + b\n",
    "(i) x\n",
    "(i)\n",
    "(2)\n",
    "fw,b (x )\n",
    "(i)\n",
    "i w,b\n",
    "(fw,b (x\n",
    "(i)) − y\n",
    "(i))\n",
    "2\n",
    "m J(w,b)\n",
    "The code below calculates cost by looping over each example. In each loop:\n",
    "f_wb , a prediction is calculated\n",
    "the difference between the target and the prediction is calculated and squared.\n",
    "this is added to the total cost."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "36444674",
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block after function definition on line 1 (3210251765.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[3], line 2\u001b[1;36m\u001b[0m\n\u001b[1;33m    \"\"\"\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block after function definition on line 1\n"
     ]
    }
   ],
   "source": [
    "def compute_cost(x, y, w, b):\n",
    "\"\"\"\n",
    "Computes the cost function for linear regression.\n",
    "Args:\n",
    "x (ndarray (m,)): Data, m examples\n",
    "y (ndarray (m,)): target values\n",
    "w,b (scalar) : model parameters\n",
    "Returns\n",
    "total_cost (float): The cost of using w,b as the parameters for linear regression\n",
    "to fit the data points in x and y\n",
    "\"\"\"\n",
    "# number of training examples\n",
    "m = x.shape[0]\n",
    "cost_sum = 0\n",
    "for i in range(m):\n",
    "f_wb = w * x[i] + b\n",
    "cost = (f_wb - y[i]) ** 2\n",
    "cost_sum = cost_sum + cost\n",
    "total_cost = (1 / (2 * m)) * cost_sum\n",
    "return total_cost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7910103",
   "metadata": {},
   "source": [
    "# Cost Function Intuition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b4446ad2",
   "metadata": {},
   "outputs": [],
   "source": [
    "Your goal is to find a model fw,b (x), with parameters\n",
    "= wx\n",
    "Your goal is to find a model , with parameters\n",
    ", which will accurately predict house values given an input . The cost is a measure of how accurate the\n",
    "model is on the training data.\n",
    "The cost equation (1) above shows that if and can be selected such that the predictions match the\n",
    "target data , the term will be zero and the cost minimized. In this simple two point example, you can\n",
    "achieve this!\n",
    "In the previous lab, you determined that provided an optimal solution so let's set to 100 and focus on\n",
    ".\n",
    "Below, use the slider control to select the value of that minimizes cost. It can take a few seconds for the plot\n",
    "to update."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "96f3120d",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt_intuition' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m plt_intuition(x_train,y_train)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt_intuition' is not defined"
     ]
    }
   ],
   "source": [
    "plt_intuition(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3cc2b3f",
   "metadata": {},
   "outputs": [],
   "source": [
    "The plot contains a few points that are worth mentioning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6dad9e24",
   "metadata": {},
   "outputs": [],
   "source": [
    "cost is minimized when , which matches results from the previous lab\n",
    "Because the difference between the target and pediction is squared in the cost equation, the cost increases\n",
    "rapidly when is either too large or too small.\n",
    "Using the w and b selected by minimizing cost results in a line which is a perfect fit to the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bde94dfb",
   "metadata": {},
   "source": [
    "# Cost Function Visualization- 3D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83eb41dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "You can see how cost varies with respect to both w and b by plotting in 3D or using a contour plot.\n",
    "It is worth noting that some of the plotting in this course can become quite involved. The plotting routines are\n",
    "provided and while it can be instructive to read through the code to become familiar with the methods, it is not\n",
    "needed to complete the course successfully. The routines are in lab_utils_uni.py in the local directory.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e0e11e1c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "7ba49393",
   "metadata": {},
   "source": [
    "# Larger Data Set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5ab38c95",
   "metadata": {},
   "outputs": [],
   "source": [
    "It is instructive to view a scenario with a few more data points. This data set includes data points that do not fall\n",
    "on the same line. What does that mean for the cost equation? Can we find w, and b that will give us a cost of 0?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a834f371",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = np.array([1.0, 1.7, 2.0, 2.5, 3.0, 3.2])\n",
    "y_train = np.array([250, 300, 480, 430, 630, 730,])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f631fc03",
   "metadata": {},
   "outputs": [],
   "source": [
    "In the contour plot, click on a point to select w and b to achieve the lowest cost. Use the contours to guide\n",
    "your selections. Note, it can take a few seconds to update the graph."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d9069821",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'plt' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[6], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m plt\u001b[38;5;241m.\u001b[39mclose(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mall\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m      2\u001b[0m fig, ax, dyn_items \u001b[38;5;241m=\u001b[39m plt_stationary(x_train, y_train)\n\u001b[0;32m      3\u001b[0m updater \u001b[38;5;241m=\u001b[39m plt_update_onclick(fig, ax, x_train, y_train, dyn_items)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'plt' is not defined"
     ]
    }
   ],
   "source": [
    "plt.close('all')\n",
    "fig, ax, dyn_items = plt_stationary(x_train, y_train)\n",
    "updater = plt_update_onclick(fig, ax, x_train, y_train, dyn_items)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32910f70",
   "metadata": {},
   "outputs": [],
   "source": [
    "Above, note the dashed lines in the left plot. These represent the portion of the cost contributed by each\n",
    "example in your training set. In this case, values of approximately w = 209 and b = 2.4 provide low cost. Note\n",
    "---------------------------------------------------------------------------\n",
    "NameError Traceback (most recent call la"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3f414a11",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63a35eb9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
